import { PayloadAction } from '@reduxjs/toolkit';
import { DAppOptions, ModeOptions, ThemeOptions, TransactionOption } from '../interface';
declare type BankDetails = {
    iban: string;
    recipient: string;
};
export interface OptionState {
    theme: ThemeOptions;
    mode: ModeOptions;
    sourceChain: string;
    targetChain: string;
    targetAddress: string;
    solanaConnectModal: boolean;
    tronConnectModal: boolean;
    helpPopup: boolean;
    hashPopup: boolean;
    bankPopup: boolean;
    walletAutoConnect: boolean;
    provider: any;
    dAppOption: DAppOptions;
    solanaProvider: any;
    submitted: boolean;
    amount: number;
    feeDeduct: boolean;
    transactionOption?: TransactionOption;
    errorHandler: Function;
    keplrHandler: Function;
    closeHandler: Function;
    successHandler: Function;
    switchChainHandler: Function;
    initChainFromProvider: boolean;
    serviceFee: number;
    backendUrl: string;
    nodeProviderQuery: string;
    kimaExplorerUrl: string;
    txId: number;
    currencyOptions: any;
    compliantOption: boolean;
    sourceCompliant: string;
    targetCompliant: string;
    useFIAT: boolean;
    bankDetails: BankDetails;
    targetNetworkFetching: boolean;
    signature: string;
    uuid: string;
    kycStatus: string;
}
export declare const optionSlice: import("@reduxjs/toolkit").Slice<OptionState, {
    initialize: (state: import("immer/dist/internal").WritableDraft<OptionState>) => void;
    setTheme: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<ThemeOptions>) => void;
    setKimaExplorer: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setSourceChain: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setTargetChain: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setTargetAddress: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setSolanaConnectModal: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setTronConnectModal: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setHelpPopup: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setHashPopup: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setBankPopup: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setProvider: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<any>) => void;
    setDappOption: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<DAppOptions>) => void;
    setWalletAutoConnect: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setSolanaProvider: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<any>) => void;
    setSubmitted: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setTransactionOption: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<TransactionOption>) => void;
    setAmount: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<number>) => void;
    setErrorHandler: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<Function>) => void;
    setKeplrHandler: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<Function>) => void;
    setCloseHandler: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<Function>) => void;
    setSwitchChainHandler: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<Function>) => void;
    setInitChainFromProvider: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setSuccessHandler: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<Function>) => void;
    setServiceFee: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<number>) => void;
    setMode: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<ModeOptions>) => void;
    setFeeDeduct: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setBackendUrl: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setNodeProviderQuery: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setTxId: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<number>) => void;
    setCurrencyOptions: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<any>) => void;
    setCompliantOption: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setSourceCompliant: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setTargetCompliant: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setUseFIAT: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setBankDetails: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<BankDetails>) => void;
    setTargetChainFetching: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<boolean>) => void;
    setSignature: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setUuid: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
    setKYCStatus: (state: import("immer/dist/internal").WritableDraft<OptionState>, action: PayloadAction<string>) => void;
}, "option">;
export declare const initialize: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<any>, setKimaExplorer: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setTheme: import("@reduxjs/toolkit").ActionCreatorWithPayload<ThemeOptions, any>, setSourceChain: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setTargetChain: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setTargetAddress: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setSolanaConnectModal: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setTronConnectModal: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setHelpPopup: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setHashPopup: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setBankPopup: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setSolanaProvider: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, any>, setProvider: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, any>, setDappOption: import("@reduxjs/toolkit").ActionCreatorWithPayload<DAppOptions, any>, setWalletAutoConnect: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setSubmitted: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setTransactionOption: import("@reduxjs/toolkit").ActionCreatorWithPayload<TransactionOption, any>, setAmount: import("@reduxjs/toolkit").ActionCreatorWithPayload<number, any>, setErrorHandler: import("@reduxjs/toolkit").ActionCreatorWithPayload<Function, any>, setKeplrHandler: import("@reduxjs/toolkit").ActionCreatorWithPayload<Function, any>, setCloseHandler: import("@reduxjs/toolkit").ActionCreatorWithPayload<Function, any>, setSuccessHandler: import("@reduxjs/toolkit").ActionCreatorWithPayload<Function, any>, setSwitchChainHandler: import("@reduxjs/toolkit").ActionCreatorWithPayload<Function, any>, setInitChainFromProvider: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setServiceFee: import("@reduxjs/toolkit").ActionCreatorWithPayload<number, any>, setMode: import("@reduxjs/toolkit").ActionCreatorWithPayload<ModeOptions, any>, setFeeDeduct: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setBackendUrl: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setNodeProviderQuery: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setTxId: import("@reduxjs/toolkit").ActionCreatorWithPayload<number, any>, setCurrencyOptions: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, any>, setCompliantOption: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setSourceCompliant: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setTargetCompliant: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setUseFIAT: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setBankDetails: import("@reduxjs/toolkit").ActionCreatorWithPayload<BankDetails, any>, setTargetChainFetching: import("@reduxjs/toolkit").ActionCreatorWithPayload<boolean, any>, setSignature: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setUuid: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>, setKYCStatus: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, any>;
declare const _default: import("redux").Reducer<OptionState, import("redux").AnyAction>;
export default _default;
